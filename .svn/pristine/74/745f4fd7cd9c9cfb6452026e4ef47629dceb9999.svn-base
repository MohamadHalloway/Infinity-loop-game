package jpp.infinityloop.adapter;

import jpp.infinityloop.Board;
import jpp.infinityloop.Orientation;
import jpp.infinityloop.Tile;
import jpp.infinityloop.TileType;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.CountDownLatch;

public class BlobCoder {
    public Board decode(byte[] data) {
//        System.out.println(Arrays.toString(hexarray(data)));
        //initializing
        byte[] infinitySymbol = {(byte) 0xe2, (byte) 0x88, (byte) 0x9e};
        for (int i = 0 ; i < infinitySymbol.length; i++) {
            if (data[i] != infinitySymbol[i]) throw new IllegalArgumentException();
        }
        //width and height
        int width = 0;
        int height = 0;
        List<Tile> tiles = new ArrayList<>();
        for (int i = 3; i < 7; i++) {
            width += data[i];
        }
        for (int i = 7; i < 11; i++) {
           height += data[i];
        }

        //turning the Bytes in Tiles and adding them to the List
        for (int i = 11; i < data.length; i++) {
            byte[] both = separate(data[i]);
            Tile tile1 = new Tile(both[0]);
            Tile tile2 = new Tile(both[1]);
            tiles.add(tile1);
            tiles.add(tile2);
        }
        Board result = new Board(width, height, tiles);
        return result;
    }

    public byte[] encode(Board board) {
        byte[] result = new byte[11 + (board.getTiles().size() / 2)];

        //get free from the even and odd length
        if (board.getTiles().size() % 2 != 0) {
            Tile scam = new Tile(0x0);
            board.getTiles().add(scam);
        }
        //infinity symbol coding
        byte[] infinitySymbol = {(byte) 0xe2, (byte) 0x88, (byte) 0x9e};
        for (int i = 0; i < infinitySymbol.length; i++) {
            result[i] =  infinitySymbol[i];
        }


        int count = 0;

        //widht and height in byte[] converted and add to result
        byte[] widthBytes = intToByteArray(board.getWidth());
        for (int i = 3; i < 7; i++) {
            result[i] = widthBytes[count];
            count++;
        }
        count = 0;
        byte[] heightBytes = intToByteArray(board.getHeight());
        for (int i = 7; i < 11; i++) {
            result[i] = heightBytes[count];
            count++;
        }
        //decoding the Tiles
        Iterator<Tile> iterator = board.getTiles().iterator();
        for (int i = 11; i < result.length; i++) {
            byte res = mix(iterator.next().getHex(), iterator.next().getHex());
            result[i] = res;
        }
        return result;

    }


    public byte[] separate(byte mixed) {
        byte[] result = new byte[2];
        result[0] = (byte) ((mixed >> 4) & 0x0F);
        result[1] = (byte) ((mixed) & 0x0f);
        return result;
    }

    public byte mix(byte b1, byte b2) {
        byte mixed = (byte) ((b1 << 4) | (b2 & 0x0F));
        return mixed;
    }

    /*public String[] hexarray(byte[] byteArray) {
        String[] result = new String[byteArray.length];
        for (int i = 0; i < byteArray.length; i++) {
            result[i] = Integer.toHexString(byteArray[i]);
        }
        return result;
    }*/

    /*public int byteToInt(byte[] bytes) {
        int val = 0;
//        for (int i = 0; i < bytes.length; i++) {
        for (int i = bytes.length - 1; i >= 0; i--) {
            val = val << 8;
            val = val | (bytes[i] & 0xFF);
        }
        return val;
    }*/


    public byte[] intToByteArray(int number) {
        if (number > 508 || number < 0) throw new IllegalStateException("width or height doesn't match");
            byte[] b = new byte[4];
            int count  = 0;
            while (count < 4){
                if (number > 127){
                    b[count] = 127;
                    number -= 127;
                    count++;
                }
                else {
                    b[count] = (byte) number;
                    number = 0;
                    count++;
                }
            }
        return b;
    }
}
